#1 SS
def find_splice(dna_motif, dna):
    c1 = 0
    c2 = -1 
    c3 = -1
    mylist = []
    
    for j in range(len(dna)):
        if c1 == 0:
            if dna[j] == dna_motif[0]:
                mylist.append( j )
                c1 = 1
                c2 = 0
        if c2 ==0:
            if dna[j] == dna_motif[1]:
                mylist.append( j )
                c2 = 1
                c3 = 0
        if c3 ==0:
            if dna[j] == dna_motif[2]:
                mylist.append( j )
                c3 = 1
    return mylist
############################################################################

#2 
def shared_motif(dna_list):
    count = 0
    l1 = dna_list[0]
    l2 = dna_list[1]
    l3 = dna_list[2]
    amount_a = []
    final = []
    for s in range(5):
        amount = 0
        
        for i in range(len(l1)):
            j = i + count + 1
            var = l1[i:j]
            
            if len(var) > count:
                for c in range(len(l2)):
                    h = c+count+1
                    
                    if var == l2[c:h]:
                        for k in range(len(l3)):
                            f = k+count+1
                            
                            if var == l3[k:f]:
                                final.append(var)
                                amount += 1
        amount_a.append(amount)
        count += 1
    zeros = 0
    for i in range(len(amount_a)):
        if amount_a[i]==0:
            zeros += 1
    
    for i in range(zeros):
        amount_a.remove(0)
        
    return final[-(amount_a[-1])]
############################################################################

#3 MJ
def get_edgs(dict):
    key_list = dict.keys()
    list=[]
    for i in key_list:
        list.append(i)
    result=[]
    for i in range(0,len(list)):
        for j in range(i+1,len(list)):
            if(dict[list[i]][:3]==dict[list[j]][-3:] or dict[list[i]][-3:]==dict[list[j]][:3]):
                result.append((list[i],list[j]))
    return result
    
############################################################################

#4 MJ
def assemble_genome(dna_list):
    def findOverlappingPair(str1,str2):
        max = 0
        len1 = len(str1)
        len2 = len(str2)
        for i in min(len1,len2):
            if str1[i]:
#https://www.geeksforgeeks.org/shortest-superstring-problem/
############################################################################

#5
#def perfect_match(rna):
############################################################################

#6
#def random_genome(dna, gc_content):
############################################################################

#7
#def rev_palindrome(dna):
############################################################################
