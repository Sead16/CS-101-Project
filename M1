#1
def s(dna):    
    dna = dna.upper()
    count_A = dna.count('A')
    count_C = dna.count('C')
    count_G = dna.count('G')
    count_T = dna.count('T')
    dict_dna = {
        'A' : count_A ,
        'C' : count_C ,
        'G' : count_G ,
        'T' : count_T
        }
    return dict_dna
    
#2    
def dna2rna(dna):
    rna = ''
    for symbol in dna:
        if symbol == 'A':
            rna = rna + 'A'
        if symbol == 'T':
            rna = rna + 'U'
        elif symbol == 'G':
            rna = rna + 'G'
        elif symbol == 'C':
            rna = rna + 'C'
    return rna


#3
def reverse_complement(dna):
    reverse_complement = ''
    for symbol in dna:
        if symbol == 'A':
            reverse_complement = reverse_complement + 'T'
        elif symbol == 'T':
            reverse_complement = reverse_complement + 'A'
        elif symbol == 'C':
            reverse_complement = reverse_complement + 'G'
        elif symbol == 'G':
            reverse_complement = reverse_complement + 'C'
    reverse_complement = reverse_complement[::-1]
    return reverse_complement


#4
def mendels_law(hom, het, rec):



#5
def fibonacci_rabbits(n, k):
    f1, f2 = 1, 1
    for i in range(n - 1):
        f2, f1 = f1, f1 + (f2 * k)
    return f2

#6
gc_content(dna_list):


#7
def rna2codon(triplet):
    genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
    allowed_codons = set('ACGU')
    triplet.upper()
    if triplet in genetic_code:
        return genetic_code[triplet]
    else:
        return "Invalid"



locate_substring(dna_snippet, dna):


hamming_dist(dna1, dna2)：




count_dom_phenotype(genotypes)：




source_rna(protein):



splice_rna(dna, intron_list):
