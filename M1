#1
def s(dna):    
    dna = dna.upper()
    count_A = dna.count('A')
    count_C = dna.count('C')
    count_G = dna.count('G')
    count_T = dna.count('T')
    dict_dna = {
        'A' : count_A ,
        'C' : count_C ,
        'G' : count_G ,
        'T' : count_T
        }
    return dict_dna
    
#2    
def dna2rna(dna):
    rna = ''
    for symbol in dna:
        if symbol == 'A':
            rna = rna + 'A'
        if symbol == 'T':
            rna = rna + 'U'
        elif symbol == 'G':
            rna = rna + 'G'
        elif symbol == 'C':
            rna = rna + 'C'
    return rna


#3 MJ
def reverse_complement(dna):
    reverse_complement = ''
    for symbol in dna:
        if symbol == 'A':
            reverse_complement = reverse_complement + 'T'
        elif symbol == 'T':
            reverse_complement = reverse_complement + 'A'
        elif symbol == 'C':
            reverse_complement = reverse_complement + 'G'
        elif symbol == 'G':
            reverse_complement = reverse_complement + 'C'
    reverse_complement = reverse_complement[::-1]
    return reverse_complement


#4 MJ
def mendels_law(hom, het, rec):
  list1=[]
  list2=[]
  i=0
  while i<hom:
    list1.append(0)
    list2.append(0)
    i+=1
  i=0
  while i<het:
    list1.append(0)
    list2.append(1)
    i+=1
  i=0
  while i<rec:
    list1.append(1)
    list2.append(1)
    i+=1
  dom=0
  i=0
  while i<hom+het+rec:
    j=0
    while j<hom+het+rec:
      if list1[i] * list2[j] == 0 and i!=j:
        dom += 1
      j += 1
    i += 1
  return dom/(hom+het+rec)/(hom+het+rec-1)


#5 MJ
def fibonacci_rabbits(n, k):
    f1, f2 = 1, 1
    for i in range(n - 1):
        f2, f1 = f1, f1 + (f2 * k)
    return f2

#6 FLR
gc_content(dna_list):
    greatestdnastring=""
    greatestdnadecimal=0
    gcindex=0
    ggcindex=0
    for LLDNASTRING in dna_list:
        currentdnadecimal=((LLDNASTRING.count("G")+LLDNASTRING.count("C"))/len(LLDNASTRING))
        if currentdnadecimal > greatestdnadecimal:
            greatestdnadecimal=currentdnadecimal
            greatestdnastring=LLDNASTRING
            ggcindex=gcindex
        gcindex=gcindex+1
    greatestdnapercent=100*greatestdnadecimal
    ggctuple=(ggcindex,greatestdnapercent)
    return ggctuple

#7 MJ
def rna2codon(rna):
    def rna2_1codon(triplet):
        genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
        }
        allowed_codons = set('ACGU')
        triplet.upper()
        if triplet in genetic_code:
            return genetic_code[triplet]
        else:
            return "Invalid"
    codons=''
    for i in range( 0,int( len( rna ) / 3 ) ):
        codons= codons + rna2_1codon(rna[ 3*i:3*i+3 ])
    return codons


locate_substring(dna_snippet, dna):

#9 FLR
hamming_dist(dna1, dna2)ï¼š
    LMindex=0
    LMdifferencecounter=0
    for LMcharacter in dna1:
        if LMcharacter == dna2[LMindex]:
            1
        else:
            LMdifferencecounter=LMdifferencecounter+1
        LMindex=LMindex+1
    return differencecounter
    




#10 MJ
def count_dom_phenotype(genotypes):
  dom_phenotype = (genotypes[0]*1+genotypes[1]*1+genotypes[2]*1+genotypes[3]*.75+genotypes[4]*.5)*2
  return dom_phenotype


#11 SS
def source_rna(protein):
    
    reverse_genetic_code = {
        'F': 2 , 'L': 6 , 'I': 3 , 'M': 1 , 'V': 4 , 'S': 6 , 'T': 4 , 'A': 4 , 'Y': 2 , "*": 3 , 
        'H': 2 , 'Q': 2 , 'N': 2 , 'K': 2 , 'D': 2 , 'E': 2 , 'C': 2 , 'W': 1 , 'R': 6, 
        'G': 4 , 'P': 4
        }
    count = 1
    for i in range(len(protein)):
        paths = reverse_genetic_code[protein[i]]
        count *= paths
    count = count * 3
    return count



splice_rna(dna, intron_list):
